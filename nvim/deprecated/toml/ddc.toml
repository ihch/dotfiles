[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim']
on_source = 'denops.vim'
hook_source = '''
call ddc#custom#patch_global('ui', 'native')
call ddc#custom#patch_global('sources', ['nvim-lsp', 'around'])
call ddc#custom#patch_global('sourceOptions', {
  \ '_': {
  \   'matchers': ['matcher_fuzzy'],
  \   'sorters': ['sorter_fuzzy'],
  \   'converters': ['converter_fuzzy'],
  \ },
  \ 'around': {'mark': '[A]'},
  \ 'nvim-lsp': {
  \   'mark': '[LSP]',
  \   'forceCompletionPattern': '\.\w*|:\w*|->\w*' },
  \ })

" Use Customized labels
call ddc#custom#patch_global('sourceParams', {
  \ 'nvim-lsp': { 'kindLabels': { 'Class': 'c' } },
  \ })

call ddc#enable()
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
# {{{
hook_add ='''
lua << EOF
local lspconfig = require("lspconfig")

local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
end

lspconfig.tsserver.setup({
    on_attach = on_attach,
    filetypes = { "javascript", "typescript", "javascriptreact", "typescriptreact", "typescript.tsx" },
    root_dir = lspconfig.util.root_pattern("package.json"),
})
lspconfig.eslint.setup({
    on_attach = on_attach,
    filetypes = { "javascript", "typescript", "javascriptreact", "typescriptreact", "typescript.tsx" }
})
lspconfig.denols.setup({
    root_dir = lspconfig.util.root_pattern("deno.json"),
})

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
-- local servers = {
--   'denols',
--   'tsserver',
--   'gopls'
-- }
-- for _, lsp in pairs(servers) do
--   require('lspconfig')[lsp].setup {
--     on_attach = on_attach,
--     flags = {
--       -- This will be the default in neovim 0.7+
--       debounce_text_changes = 150,
--     }
--   }
-- end

-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
vim.api.nvim_set_keymap('n', '<C-[>', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', '<C-]>', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)

EOF


nnoremap <silent> gD <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> gd <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gi <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <C-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> <space>wa <cmd>lua vim.lsp.buf.add_workspace_folder()<CR>
nnoremap <silent> <space>wr <cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>
nnoremap <silent> <space>wl <cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>
nnoremap <silent> <space>D <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> <space>rn <cmd>lua vim.lsp.buf.rename()<CR>
nnoremap <silent> <space>a <cmd>lua vim.lsp.buf.code_action()<CR>
nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> <space>f <cmd>lua vim.lsp.buf.formatting()<CR>
'''
# }}}

[[plugins]]
repo ='williamboman/mason.nvim'
# hook_post_update = 'MasonUpdate'
hook_add = '''
lua << EOF

local mason = require("mason")

mason.setup({
    ui = {
        icons = {
            package_installed = "✓",
            package_pending = "➜",
            package_uninstalled = "✗"
        }
    }
})
EOF
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
hook_add = '''
lua << EOF

local mason_lspconfig = require("mason-lspconfig")
local servers = {
    "denols",
    "tsserver",
    "eslint",
    "jsonls",
    "gopls",
    "rust_analyzer",
    "html",
}

mason_lspconfig.setup({
    ensure_installed = servers
})

EOF
'''

[[plugins]]
repo = 'Shougo/ddc-around'
 on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

# [[plugins]]
# repo = 'Shougo/ddc-converter_remove_overlap'
# on_source = 'ddc.vim' 

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

